"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[7577],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[d]="string"==typeof e?e:o,s[1]=p;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},49685:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const a={},s="MongoDB Atlas vector-search with SuperDuperDB",p={unversionedId:"use_cases/items/vector_search",id:"use_cases/items/vector_search",title:"MongoDB Atlas vector-search with SuperDuperDB",description:"Set your openai key if it's not already in your .env variables",source:"@site/content/use_cases/items/vector_search.md",sourceDirName:"use_cases/items",slug:"/use_cases/items/vector_search",permalink:"/docs/use_cases/items/vector_search",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/use_cases/items/vector_search.md",tags:[],version:"current",frontMatter:{},sidebar:"useCasesSidebar",previous:{title:"Transfer learning using Sentence Transformers and Scikit-Learn",permalink:"/docs/use_cases/items/transfer_learning"},next:{title:"Search within videos with text",permalink:"/docs/use_cases/items/video_search"}},i={},l=[],c={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mongodb-atlas-vector-search-with-superduperdb"},"MongoDB Atlas vector-search with SuperDuperDB"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!pip install superduperdb\n!pip install sentence_transformers\n")),(0,o.kt)("p",null,"Set your ",(0,o.kt)("inlineCode",{parentName:"p"},"openai")," key if it's not already in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\nif 'OPENAI_API_KEY' not in os.environ:\n    raise Exception('You need to set an OpenAI key as environment variable: \"export OPEN_API_KEY=sk-...\"')\n")),(0,o.kt)("p",null,"This line allows ",(0,o.kt)("inlineCode",{parentName:"p"},"superduperdb")," to connect to MongoDB. Under the hood, ",(0,o.kt)("inlineCode",{parentName:"p"},"superduperdb")," sets up configurations\nfor where to store:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"models"),(0,o.kt)("li",{parentName:"ul"},"outputs"),(0,o.kt)("li",{parentName:"ul"},"metadata\nIn addition ",(0,o.kt)("inlineCode",{parentName:"li"},"superduperdb")," configures how vector-search is to be performed.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\n# Uncomment one of the following lines to use a bespoke MongoDB deployment\n# For testing the default connection is to mongomock\n\nmongodb_uri = os.getenv("MONGODB_URI", "mongomock://test")\n# mongodb_uri = "mongodb://localhost:27017"\n# mongodb_uri = "mongodb://superduper:superduper@mongodb:27017/documents"\n# mongodb_uri = "mongodb://<user>:<pass>@<mongo_cluster>/<database>"\n# mongodb_uri = "mongodb+srv://<username>:<password>@<atlas_cluster>/<database>"\n\n# Super-Duper your Database!\nfrom superduperdb import superduper\ndb = superduper(mongodb_uri)\n')),(0,o.kt)("p",null,"We've prepared some data - it's the inline documentation of the ",(0,o.kt)("inlineCode",{parentName:"p"},"pymongo")," API!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!curl -O https://superduperdb-public.s3.eu-west-1.amazonaws.com/pymongo.json\n")),(0,o.kt)("p",null,"We can insert this data to MongoDB using the ",(0,o.kt)("inlineCode",{parentName:"p"},"superduperdb")," API, which supports ",(0,o.kt)("inlineCode",{parentName:"p"},"pymongo")," commands."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import json\nfrom superduperdb.db.mongodb.query import Collection\nfrom superduperdb.container.document import Document as D\n\nwith open('pymongo.json') as f:\n    data = json.load(f)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"data[0]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.execute(\n    Collection('documents').insert_many([D(r) for r in data])\n)\n")),(0,o.kt)("p",null,"In the remainder of the notebook you can choose between using ",(0,o.kt)("inlineCode",{parentName:"p"},"openai")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"sentence_transformers")," to\nperform vector-search. After instantiating the model wrappers, the rest of the notebook is identical."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.openai.model import OpenAIEmbedding\n\nmodel = OpenAIEmbedding(model='text-embedding-ada-002')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import sentence_transformers\nfrom superduperdb.container.model import Model\nfrom superduperdb.ext.vector.encoder import vector\n\nmodel = Model(\n    identifier='all-MiniLM-L6-v2',\n    object=sentence_transformers.SentenceTransformer('all-MiniLM-L6-v2'),\n    encoder=vector(shape=(384,)),\n    predict_method='encode',\n    postprocess=lambda x: x.tolist(),\n    batch_predict=True,\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"model.predict('This is a test', one=True)\n")),(0,o.kt)("p",null,'Now we can configure the Atlas vector-search index.\nThis command saves and sets up a model to "listen" to a particular subfield (or whole document) for\nnew text, and convert this on the fly to vectors which are then indexed by Atlas vector-search.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.vector_index import VectorIndex\nfrom superduperdb.container.listener import Listener\n\ndb.add(\n    VectorIndex(\n        identifier='pymongo-docs',\n        indexing_listener=Listener(\n            model=model,\n            key='value',\n            select=Collection('documents').find(),\n            predict_kwargs={'max_chunk_size': 1000},\n        ),\n    )\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.show('vector_index')\n")),(0,o.kt)("p",null,"Now the index is set up we can use it in a query. ",(0,o.kt)("inlineCode",{parentName:"p"},"superduperdb")," provides some syntactic sugar for\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"aggregate")," search pipelines, which can trip developers up. It also handles\nall conversion of inputs to vectors under the hood"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.db.mongodb.query import Collection\nfrom superduperdb.container.document import Document as D\nfrom IPython.display import *\n\nquery = 'Query the database'\n\nresult = db.execute(\n    Collection('documents')\n        .like(D({'value': query}), vector_index='pymongo-docs', n=5)\n        .find()\n)\n\ndisplay(Markdown('---'))\n\nfor r in result:\n    display(Markdown(f'### `{r[\"parent\"] + \".\" if r[\"parent\"] else \"\"}{r[\"res\"]}`'))\n    display(Markdown(r['value']))\n    display(Markdown('---'))\n")))}u.isMDXComponent=!0}}]);