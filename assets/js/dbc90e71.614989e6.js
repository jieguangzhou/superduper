"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[2107],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),u=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(p.Provider,{value:n},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),l=u(t),m=r,h=l["".concat(p,".").concat(m)]||l[m]||d[m]||a;return t?o.createElement(h,s(s({ref:n},c),{},{components:t})):o.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[l]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<a;u++)s[u]=t[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},54634:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=t(87462),r=(t(67294),t(3905));const a={},s="Ask the docs anything about SuperDuperDB",i={unversionedId:"use_cases/items/question_the_docs",id:"use_cases/items/question_the_docs",title:"Ask the docs anything about SuperDuperDB",description:"In this notebook we show you how to implement the much-loved document Q&A task, using SuperDuperDB",source:"@site/content/use_cases/items/question_the_docs.md",sourceDirName:"use_cases/items",slug:"/use_cases/items/question_the_docs",permalink:"/docs/use_cases/items/question_the_docs",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/use_cases/items/question_the_docs.md",tags:[],version:"current",frontMatter:{},sidebar:"useCasesSidebar",previous:{title:"Multimodal search with CLIP",permalink:"/docs/use_cases/items/multimodal_image_search_clip"},next:{title:"Creating a DB of image features in torchvision",permalink:"/docs/use_cases/items/resnet_features"}},p={},u=[],c={toc:u},l="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(l,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ask-the-docs-anything-about-superduperdb"},"Ask the docs anything about SuperDuperDB"),(0,r.kt)("p",null,"In this notebook we show you how to implement the much-loved document Q&A task, using SuperDuperDB\ntogether with MongoDB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"!pip install superduperdb\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\nif 'OPENAI_API_KEY' not in os.environ:\n    raise Exception('Environment variable \"OPENAI_API_KEY\" not set')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nfrom superduperdb import superduper\nfrom superduperdb.db.mongodb.query import Collection\n\n# Uncomment one of the following lines to use a bespoke MongoDB deployment\n# For testing the default connection is to mongomock\n\nmongodb_uri = os.getenv("MONGODB_URI","mongomock://test")\n# mongodb_uri = "mongodb://localhost:27017"\n# mongodb_uri = "mongodb://superduper:superduper@mongodb:27017/documents"\n# mongodb_uri = "mongodb://<user>:<pass>@<mongo_cluster>/<database>"\n# mongodb_uri = "mongodb+srv://<username>:<password>@<atlas_cluster>/<database>"\n\n# Super-Duper your Database!\nfrom superduperdb import superduper\ndb = superduper(mongodb_uri)\n\ncollection = Collection(\'questiondocs\')\n')),(0,r.kt)("p",null,"In this example we use the internal textual data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"superduperdb"),' project\'s API documentation, with the "meta"-goal of\ncreating a chat-bot to tell us about the project which we are using!'),(0,r.kt)("p",null,"Uncomment the following cell if you have the superduperdb docs locally.\nOtherwise you can load the data in the following cells."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# import glob\n\n# ROOT = '../docs/content/docs'\n\n# STRIDE = 5       # stride in numbers of lines\n# WINDOW = 10       # length of window in numbers of lines\n\n# content = sum([open(file).readlines() \n#                for file in glob.glob(f'{ROOT}/*/*.md') \n#                + glob.glob('{ROOT}/*.md')], [])\n# chunks = ['\\n'.join(content[i: i + WINDOW]) for i in range(0, len(content), STRIDE)]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"!curl -O https://superduperdb-public.s3.eu-west-1.amazonaws.com/superduperdb_docs.json\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import json\n\nwith open('superduperdb_docs.json') as f:\n    chunks = json.load(f)\n")),(0,r.kt)("p",null,"You can see that the chunks of text contain bits of code, and explanations,\nwhich can become useful in building a document Q&A chatbot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from IPython.display import Markdown\nMarkdown(chunks[1])\n")),(0,r.kt)("p",null,"As usual we insert the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.document import Document\n\ndb.execute(collection.insert_many([Document({'txt': chunk}) for chunk in chunks]))\n")),(0,r.kt)("p",null,"We set up a standard ",(0,r.kt)("inlineCode",{parentName:"p"},"superduperdb")," vector-search index using ",(0,r.kt)("inlineCode",{parentName:"p"},"openai")," (although there are many options\nhere: ",(0,r.kt)("inlineCode",{parentName:"p"},"torch"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sentence_transformers"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"transformers"),", ...)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.vector_index import VectorIndex\nfrom superduperdb.container.listener import Listener\nfrom superduperdb.ext.openai.model import OpenAIEmbedding\n\ndb.add(\n    VectorIndex(\n        identifier='my-index',\n        indexing_listener=Listener(\n            model=OpenAIEmbedding(model='text-embedding-ada-002'),\n            key='txt',\n            select=collection.find(),\n        ),\n    )\n)\n")),(0,r.kt)("p",null,"Now we create a chat-completion component, and add this to the system:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.openai.model import OpenAIChatCompletion\n\nchat = OpenAIChatCompletion(\n    model='gpt-3.5-turbo',\n    prompt=(\n        'Use the following description and code-snippets aboout SuperDuperDB to answer this question about SuperDuperDB\\n'\n        'Do not use any other information you might have learned about other python packages\\n'\n        'Only base your answer on the code-snippets retrieved\\n'\n        '{context}\\n\\n'\n        'Here\\'s the question:\\n'\n    ),\n)\n\ndb.add(chat)\n")),(0,r.kt)("p",null,"We can view that this is now registed in the system:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(db.show('model'))\n")),(0,r.kt)("p",null,"Finally, asking questions about the documents can be targeted with a particular query.\nUsing the power of MongoDB, this allows users to use vector-search in combination with\nimportant filtering rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.document import Document\nfrom IPython.display import display, Markdown\n\nq = 'Can you give me a code-snippet to set up a `VectorIndex`?'\n\noutput, context = db.predict(\n    model_name='gpt-3.5-turbo',\n    input=q,\n    context_select=(\n        collection\n            .like(Document({'txt': q}), vector_index='my-index', n=5)\n            .find()\n    ),\n    context_key='txt',\n)\n\nMarkdown(output.content)\n")))}d.isMDXComponent=!0}}]);